h1. Ninja Mustache User Guide



h2. <a name="syntax">Template Syntax</a>

A template file is a text file, some parts of which have placeholders for dynamically generated content. The templateâ€™s dynamic elements are written using the Mustache.java engine.

Dynamic elements are resolved during template execution. The rendered result is then sent as part of the HTTP response.

More detailed manual: <a href="http://mustache.github.io/mustache.5.html" target="_blank">mustache.js manual</a>. For samples, <a href="https://github.com/spullara/mustache.java/tree/master/compiler/src/test/resources">here</a>.

h3. <a name="comment">Comments</a>

Comments begin with a bang and are ignored. The following template:

bc. <h1>Today{{! ignore me }}.</h1>

Will render as follows:

bc. <h1>Today.</h1>

Comments may contain newlines.

h3. <a name="tags">Tag Types</a>

Tags are indicated by the double mustaches. {{person}} is a tag, as is {{#person}}. In both examples, we'd refer to person as the key or tag key.

h3. <a name="variables">Variables</a>

The most basic tag type is the variable. A {{name}} tag in a basic template will try to find the name key in the current context. If there is no name key, nothing will be rendered.

All variables are HTML escaped by default. If you want to return unescaped HTML, use the triple mustache: 

bc. {{{name}}}

By default a variable "miss" returns an empty string.

Template:

bc. * {{name}}
* {{age}}
* {{company}}
* {{{company}}}

Hash:

bc. {
  "name": "Chris",
  "company": "<b>GitHub</b>"
}

Output:

bc. * Chris
*
* &lt;b&gt;GitHub&lt;/b&gt;
* <b>GitHub</b>

h3. <a name="sections">Sections</a>

Sections render blocks of text one or more times, depending on the value of the key in the current context.

A section begins with a pound and ends with a slash. That is, {{#person}} begins a "person" section while {{/person}} ends it.

The behavior of the section is determined by the value of the key.

h4. <a name="empty">False Values or Empty Lists</a>

If the person key exists and has a value of false or an empty list, the HTML between the pound and slash will not be displayed.

Template:

bc. Shown.
{{#nothin}}
  Never shown!
{{/nothin}}

Hash:

bc. {
  "person": true,
}

Output:

bc. Shown.

h4. <a name="lists">Non-Empty Lists</a>

If the person key exists and has a non-false value, the HTML between the pound and slash will be rendered and displayed one or more times.

When the value is a non-empty list, the text in the block will be displayed once for each item in the list. The context of the block will be set to the current item for each iteration. In this way we can loop over collections.

Template:

bc. {{#repo}}
  <b>{{name}}</b>
{{/repo}}

Hash:

bc. {
  "repo": [
    { "name": "resque" },
    { "name": "hub" },
    { "name": "rip" },
  ]
}

Output:

bc. <b>resque</b>
<b>hub</b>
<b>rip</b>

h4. <a name="non-false-values">Non-False Values</a>

When the value is non-false but not a list, it will be used as the context for a single rendering of the block.

Template:

bc. {{#person?}}
  Hi {{name}}!
{{/person?}}

Hash:

bc. {
  "person?": { "name": "Jon" }
}

Output:

bc. Hi Jon!

h3. <a name="inverted">Inverted Section</a>

An inverted section begins with a caret (hat) and ends with a slash. That is {{^person}} begins a "person" inverted section while {{/person}} ends it.

While sections can be used to render text one or more times based on the value of the key, inverted sections may render text once based on the inverse value of the key. That is, they will be rendered if the key doesn't exist, is false, or is an empty list.

Template:

bc. {{#repo}}
  <b>{{name}}</b>
{{/repo}}
{{^repo}}
  No repos :(
{{/repo}}

Hash:

bc. {
  "repo": []
}

Output:

bc. No repos :(

h3. <a name="partials">Partials</a>

Partials begin with a greater than sign, like {{> box}}.

Partials are rendered at runtime (as opposed to compile time), so recursive partials are possible. Just avoid infinite loops.

Giving the following structure

layout.mustache

bc. <html>
	<head>
	<title>{{$title}}Default Title{{/title}}</title>
	</head>
	<body>
		{{> header}}
		<div class="body">
			{{$body}}Default Body{{/body}}
		</div>
		{{> footer}}
	</body>
</html>

user.mustache

bc. {{<layout}}
{{$title}}User dashboard{{/title}}
{{$body}}
	Hello, {{$name}}{{name}}{{/name}}!
{{/body}}
{{/layout}}

header.mustache

bc. <div>simple header</div>

footer.mustache

bc. <footer>footer content</footer>

Render the user.mustache template with this hash

bc. {
  "name": "userName"
}

will return

bc. <html>
	<head>
		<title>User dashboard</title>
	</head>
	<body>
		<div>simple header</div>
		<div class="body">
			Hello, userName!
		</div>
		<footer>footer content</footer>
	</body>
</html>

h2. <a name="implicit_object">Implicit objects available in a template</a>

Ninja Mustache plugin automatically declare and set the following implicit objects:

| Variable | Description & possible usage in Controller | Example usage in template |
| @lang@ | Language | <code><p>Implicit language is: {{lang}}</p> </code>|
| @session@ | <code>context.getSessionCookie().put("username", "kevin");</code> | <code><p>{{session.username}}</p></code> |
| @contextPath@ | Get the context path on which the application is running, ie. return the context-path with a leading "/" or "" if running on root | <code><p>{{contextPath}}</p></code> |
| @flashSuccess@ | <code>context.getFlashCookie().success("success")</code> | <code><p>{{flash.success}}</p></code> |
| @flashError@ | <code>context.getFlashCookie().error("failed")</code> |  <code><p>{{flash.error}}</p></code>  |
| @custom_flash@ | <code>context.getFlashCookie().put("custom_flash", "some custome msg");</code> | <code><p>{{flash.custom_flash}}</p></code> |

